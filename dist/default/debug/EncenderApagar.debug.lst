

Microchip Technology PIC LITE Macro Assembler V1.43 build -156212558 
                                                                                               Sun Sep 03 19:53:28 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	dabs	1,0x7E,2
    13  0000                     
    14                           ; Version 1.43
    15                           ; Generated 25/07/2017 GMT
    16                           ; 
    17                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    18                           ; All rights reserved.
    19                           ; 
    20                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    21                           ; 
    22                           ; Redistribution and use in source and binary forms, with or without modification, are
    23                           ; permitted provided that the following conditions are met:
    24                           ; 
    25                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    26                           ;        conditions and the following disclaimer.
    27                           ; 
    28                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    29                           ;        of conditions and the following disclaimer in the documentation and/or other
    30                           ;        materials provided with the distribution.
    31                           ; 
    32                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    33                           ;        software without specific prior written permission.
    34                           ; 
    35                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    36                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    37                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    38                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    39                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    40                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    41                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    42                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    43                           ; 
    44                           ; 
    45                           ; Code-generator required, PIC16F887 Definitions
    46                           ; 
    47                           ; SFR Addresses
    48  0000                     	;# 
    49  0001                     	;# 
    50  0002                     	;# 
    51  0003                     	;# 
    52  0004                     	;# 
    53  0005                     	;# 
    54  0006                     	;# 
    55  0007                     	;# 
    56  0008                     	;# 
    57  0009                     	;# 
    58  000A                     	;# 
    59  000B                     	;# 
    60  000C                     	;# 
    61  000D                     	;# 
    62  000E                     	;# 
    63  000E                     	;# 
    64  000F                     	;# 
    65  0010                     	;# 
    66  0011                     	;# 
    67  0012                     	;# 
    68  0013                     	;# 
    69  0014                     	;# 
    70  0015                     	;# 
    71  0015                     	;# 
    72  0016                     	;# 
    73  0017                     	;# 
    74  0018                     	;# 
    75  0019                     	;# 
    76  001A                     	;# 
    77  001B                     	;# 
    78  001B                     	;# 
    79  001C                     	;# 
    80  001D                     	;# 
    81  001E                     	;# 
    82  001F                     	;# 
    83  0081                     	;# 
    84  0085                     	;# 
    85  0086                     	;# 
    86  0087                     	;# 
    87  0088                     	;# 
    88  0089                     	;# 
    89  008C                     	;# 
    90  008D                     	;# 
    91  008E                     	;# 
    92  008F                     	;# 
    93  0090                     	;# 
    94  0091                     	;# 
    95  0092                     	;# 
    96  0093                     	;# 
    97  0093                     	;# 
    98  0093                     	;# 
    99  0094                     	;# 
   100  0095                     	;# 
   101  0096                     	;# 
   102  0097                     	;# 
   103  0098                     	;# 
   104  0099                     	;# 
   105  009A                     	;# 
   106  009B                     	;# 
   107  009C                     	;# 
   108  009D                     	;# 
   109  009E                     	;# 
   110  009F                     	;# 
   111  0105                     	;# 
   112  0107                     	;# 
   113  0108                     	;# 
   114  0109                     	;# 
   115  010C                     	;# 
   116  010C                     	;# 
   117  010D                     	;# 
   118  010E                     	;# 
   119  010F                     	;# 
   120  0185                     	;# 
   121  0187                     	;# 
   122  0188                     	;# 
   123  0189                     	;# 
   124  018C                     	;# 
   125  018D                     	;# 
   126  0007                     _PORTCbits	set	7
   127  0007                     _PORTC	set	7
   128  0006                     _PORTB	set	6
   129  0018                     _RCSTAbits	set	24
   130  0019                     _TXREG	set	25
   131  000C                     _PIR1bits	set	12
   132  0087                     _TRISC	set	135
   133  0086                     _TRISB	set	134
   134  0098                     _TXSTAbits	set	152
   135                           
   136                           	psect	strings
   137  0003                     __pstrings:	
   138  0003                     stringtab:	
   139  0003                     __stringtab:	
   140  0003                     stringcode:	
   141                           ;	String table - string pointers are 1 byte each
   142                           
   143  0003                     stringdir:	
   144  0003  3000               	movlw	high stringdir
   145  0004  008A               	movwf	10
   146  0005  0804               	movf	4,w
   147  0006  0A84               	incf	4,f
   148  0007  0782               	addwf	2,f
   149  0008                     __stringbase:	
   150  0008  3400               	retlw	0
   151  0009                     __end_of__stringtab:	
   152  0009                     STR_1:	
   153  0009  344C               	retlw	76	;'L'
   154  000A  3465               	retlw	101	;'e'
   155  000B  3464               	retlw	100	;'d'
   156  000C  3473               	retlw	115	;'s'
   157  000D  3420               	retlw	32	;' '
   158  000E  3465               	retlw	101	;'e'
   159  000F  346E               	retlw	110	;'n'
   160  0010  3463               	retlw	99	;'c'
   161  0011  3465               	retlw	101	;'e'
   162  0012  346E               	retlw	110	;'n'
   163  0013  3464               	retlw	100	;'d'
   164  0014  3469               	retlw	105	;'i'
   165  0015  3464               	retlw	100	;'d'
   166  0016  346F               	retlw	111	;'o'
   167  0017  3473               	retlw	115	;'s'
   168  0018  342E               	retlw	46	;'.'
   169  0019  340A               	retlw	10
   170  001A  3400               	retlw	0
   171  001B                     STR_2:	
   172  001B  344C               	retlw	76	;'L'
   173  001C  3465               	retlw	101	;'e'
   174  001D  3464               	retlw	100	;'d'
   175  001E  3473               	retlw	115	;'s'
   176  001F  3420               	retlw	32	;' '
   177  0020  3461               	retlw	97	;'a'
   178  0021  3470               	retlw	112	;'p'
   179  0022  3461               	retlw	97	;'a'
   180  0023  3467               	retlw	103	;'g'
   181  0024  3461               	retlw	97	;'a'
   182  0025  3464               	retlw	100	;'d'
   183  0026  346F               	retlw	111	;'o'
   184  0027  3473               	retlw	115	;'s'
   185  0028  342E               	retlw	46	;'.'
   186  0029  340A               	retlw	10
   187  002A  3400               	retlw	0
   188                           
   189                           	psect	cinit
   190  07F6                     start_initialization:	
   191                           ; #config settings
   192                           
   193  07F6                     __initialization:	
   194                           
   195                           ; Clear objects allocated to COMMON
   196  07F6  01F0               	clrf	__pbssCOMMON& (0+127)
   197  07F7  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   198  07F8  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   199  07F9  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   200  07FA  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
   201  07FB  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
   202  07FC                     end_of_initialization:	
   203                           ;End of C runtime variable initialization code
   204                           
   205  07FC                     __end_of__initialization:	
   206  07FC  0183               	clrf	3
   207  07FD  120A  118A  2FB5   	ljmp	_main	;jump to C main() function
   208                           
   209                           	psect	bssCOMMON
   210  0070                     __pbssCOMMON:	
   211  0070                     _bandera:	
   212  0070                     	ds	2
   213  0072                     _pulso:	
   214  0072                     	ds	2
   215  0074                     _estado_boton:	
   216  0074                     	ds	2
   217                           
   218                           	psect	cstackCOMMON
   219  0076                     __pcstackCOMMON:	
   220  0076                     ?_putch:	
   221  0076                     ??_putch:	
   222                           ; 1 bytes @ 0x0
   223                           
   224  0076                     ?_iniciar_uart:	
   225                           ; 1 bytes @ 0x0
   226                           
   227  0076                     ??_iniciar_uart:	
   228                           ; 1 bytes @ 0x0
   229                           
   230  0076                     ?_main:	
   231                           ; 1 bytes @ 0x0
   232                           
   233  0076                     ?_printf:	
   234                           ; 1 bytes @ 0x0
   235                           
   236  0076                     putch@dato:	
   237                           ; 2 bytes @ 0x0
   238                           
   239                           
   240                           ; 1 bytes @ 0x0
   241  0076                     	ds	1
   242  0077                     ??_printf:	
   243                           
   244                           ; 1 bytes @ 0x1
   245  0077                     	ds	1
   246  0078                     printf@ap:	
   247                           
   248                           ; 1 bytes @ 0x2
   249  0078                     	ds	1
   250  0079                     printf@c:	
   251                           
   252                           ; 1 bytes @ 0x3
   253  0079                     	ds	1
   254  007A                     printf@f:	
   255                           
   256                           ; 1 bytes @ 0x4
   257  007A                     	ds	1
   258  007B                     ??_main:	
   259                           
   260                           	psect	maintext
   261  07B5                     __pmaintext:	
   262                           ; 1 bytes @ 0x5
   263 ;;
   264 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   265 ;;
   266 ;; *************** function _main *****************
   267 ;; Defined at:
   268 ;;		line 19 in file "EncenderApagar.c"
   269 ;; Parameters:    Size  Location     Type
   270 ;;		None
   271 ;; Auto vars:     Size  Location     Type
   272 ;;		None
   273 ;; Return value:  Size  Location     Type
   274 ;;                  1    wreg      void 
   275 ;; Registers used:
   276 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   277 ;; Tracked objects:
   278 ;;		On entry : B00/0
   279 ;;		On exit  : 0/0
   280 ;;		Unchanged: 0/0
   281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   282 ;;      Params:         0       0       0       0       0
   283 ;;      Locals:         0       0       0       0       0
   284 ;;      Temps:          0       0       0       0       0
   285 ;;      Totals:         0       0       0       0       0
   286 ;;Total ram usage:        0 bytes
   287 ;; Hardware stack levels required when called:    2
   288 ;; This function calls:
   289 ;;		_iniciar_uart
   290 ;;		_printf
   291 ;; This function is called by:
   292 ;;		Startup code after reset
   293 ;; This function uses a non-reentrant model
   294 ;;
   295                           
   296                           
   297                           ;psect for function _main
   298  07B5                     _main:	
   299                           
   300                           ;EncenderApagar.c: 20: iniciar_uart();
   301                           
   302                           ;incstack = 0
   303                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   304  07B5  120A  118A  278A  120A  118A  	fcall	_iniciar_uart
   305                           
   306                           ;EncenderApagar.c: 21: TRISB = 0b00000000;
   307  07BA  1683               	bsf	3,5	;RP0=1, select bank1
   308  07BB  1303               	bcf	3,6	;RP1=0, select bank1
   309  07BC  0186               	clrf	6	;volatile
   310                           
   311                           ;EncenderApagar.c: 22: PORTB = 0;
   312  07BD  1283               	bcf	3,5	;RP0=0, select bank0
   313  07BE  1303               	bcf	3,6	;RP1=0, select bank0
   314  07BF  0186               	clrf	6	;volatile
   315                           
   316                           ;EncenderApagar.c: 23: TRISC = 1;
   317  07C0  3001               	movlw	1
   318  07C1  1683               	bsf	3,5	;RP0=1, select bank1
   319  07C2  1303               	bcf	3,6	;RP1=0, select bank1
   320  07C3  0087               	movwf	7	;volatile
   321                           
   322                           ;EncenderApagar.c: 24: PORTC = 0;
   323  07C4  1283               	bcf	3,5	;RP0=0, select bank0
   324  07C5  1303               	bcf	3,6	;RP1=0, select bank0
   325  07C6  0187               	clrf	7	;volatile
   326  07C7                     l581:	
   327                           ;EncenderApagar.c: 28: while (1){
   328                           
   329                           
   330                           ;EncenderApagar.c: 30: if (PORTCbits.RC0 == 1 && bandera == 0){
   331  07C7  1283               	bcf	3,5	;RP0=0, select bank0
   332  07C8  1303               	bcf	3,6	;RP1=0, select bank0
   333  07C9  1C07               	btfss	7,0	;volatile
   334  07CA  2FD5               	goto	l41
   335  07CB  0870               	movf	_bandera,w
   336  07CC  0471               	iorwf	_bandera+1,w
   337  07CD  1D03               	btfss	3,2
   338  07CE  2FD5               	goto	l41
   339                           
   340                           ;EncenderApagar.c: 31: bandera = 1;
   341  07CF  3001               	movlw	1
   342  07D0  00F0               	movwf	_bandera
   343  07D1  3000               	movlw	0
   344  07D2  00F1               	movwf	_bandera+1
   345  07D3                     l42:	
   346                           ;EncenderApagar.c: 32: while(PORTCbits.RC0 == 1){}
   347                           
   348  07D3  1807               	btfsc	7,0	;volatile
   349  07D4  2FD3               	goto	l42
   350  07D5                     l41:	
   351                           
   352                           ;EncenderApagar.c: 33: }
   353                           ;EncenderApagar.c: 34: if (PORTCbits.RC0 == 1 && bandera == 1){
   354  07D5  1C07               	btfss	7,0	;volatile
   355  07D6  2FDF               	goto	l591
   356  07D7  0370               	decf	_bandera,w
   357  07D8  0471               	iorwf	_bandera+1,w
   358  07D9  1D03               	btfss	3,2
   359  07DA  2FDF               	goto	l591
   360                           
   361                           ;EncenderApagar.c: 35: bandera = 0;
   362  07DB  01F0               	clrf	_bandera
   363  07DC  01F1               	clrf	_bandera+1
   364  07DD                     l46:	
   365                           ;EncenderApagar.c: 36: while(PORTCbits.RC0 == 1){}
   366                           
   367  07DD  1807               	btfsc	7,0	;volatile
   368  07DE  2FDD               	goto	l46
   369  07DF                     l591:	
   370                           
   371                           ;EncenderApagar.c: 37: }
   372                           ;EncenderApagar.c: 39: if ( bandera == 1){
   373  07DF  0370               	decf	_bandera,w
   374  07E0  0471               	iorwf	_bandera+1,w
   375  07E1  1D03               	btfss	3,2
   376  07E2  2FEC               	goto	l597
   377                           
   378                           ;EncenderApagar.c: 40: PORTB = 0b11111111;
   379  07E3  30FF               	movlw	255
   380  07E4  0086               	movwf	6	;volatile
   381                           
   382                           ;EncenderApagar.c: 41: printf("Leds encendidos.\n");
   383  07E5  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   384  07E6  120A  118A  2799  120A  118A  	fcall	_printf
   385                           
   386                           ;EncenderApagar.c: 42: }
   387  07EB  2FC7               	goto	l581
   388  07EC                     l597:	
   389                           
   390                           ;EncenderApagar.c: 43: else{
   391                           ;EncenderApagar.c: 44: PORTB = 0b00000000;
   392  07EC  1283               	bcf	3,5	;RP0=0, select bank0
   393  07ED  1303               	bcf	3,6	;RP1=0, select bank0
   394  07EE  0186               	clrf	6	;volatile
   395                           
   396                           ;EncenderApagar.c: 45: printf("Leds apagados.\n");
   397  07EF  3013               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   398  07F0  120A  118A  2799  120A  118A  	fcall	_printf
   399  07F5  2FC7               	goto	l581
   400  07F6                     __end_of_main:	
   401                           
   402                           	psect	text1
   403  0799                     __ptext1:	
   404 ;; *************** function _printf *****************
   405 ;; Defined at:
   406 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
   407 ;; Parameters:    Size  Location     Type
   408 ;;  f               1    wreg     PTR const unsigned char 
   409 ;;		 -> STR_2(16), STR_1(18), 
   410 ;; Auto vars:     Size  Location     Type
   411 ;;  f               1    4[COMMON] PTR const unsigned char 
   412 ;;		 -> STR_2(16), STR_1(18), 
   413 ;;  tmpval          4    0        struct .
   414 ;;  cp              2    0        PTR const unsigned char 
   415 ;;  len             2    0        unsigned int 
   416 ;;  val             2    0        unsigned int 
   417 ;;  c               1    3[COMMON] char 
   418 ;;  ap              1    2[COMMON] PTR void [1]
   419 ;;		 -> ?_printf(2), 
   420 ;;  flag            1    0        unsigned char 
   421 ;;  prec            1    0        char 
   422 ;; Return value:  Size  Location     Type
   423 ;;                  2   20[None  ] int 
   424 ;; Registers used:
   425 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   426 ;; Tracked objects:
   427 ;;		On entry : 0/0
   428 ;;		On exit  : 0/0
   429 ;;		Unchanged: 0/0
   430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   431 ;;      Params:         0       0       0       0       0
   432 ;;      Locals:         3       0       0       0       0
   433 ;;      Temps:          1       0       0       0       0
   434 ;;      Totals:         4       0       0       0       0
   435 ;;Total ram usage:        4 bytes
   436 ;; Hardware stack levels used:    1
   437 ;; Hardware stack levels required when called:    1
   438 ;; This function calls:
   439 ;;		_putch
   440 ;; This function is called by:
   441 ;;		_main
   442 ;; This function uses a non-reentrant model
   443 ;;
   444                           
   445                           
   446                           ;psect for function _printf
   447  0799                     _printf:	
   448                           
   449                           ;incstack = 0
   450                           ; Regs used in _printf: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   451                           ;printf@f stored from wreg
   452  0799  00FA               	movwf	printf@f
   453                           
   454                           ;doprnt.c: 466: va_list ap;
   455                           ;doprnt.c: 499: signed char c;
   456                           ;doprnt.c: 506: signed char prec;
   457                           ;doprnt.c: 508: unsigned char flag;
   458                           ;doprnt.c: 523: union {
   459                           ;doprnt.c: 524: unsigned long vd;
   460                           ;doprnt.c: 525: double integ;
   461                           ;doprnt.c: 526: } tmpval;
   462                           ;doprnt.c: 528: unsigned int val;
   463                           ;doprnt.c: 529: unsigned len;
   464                           ;doprnt.c: 530: const char * cp;
   465                           ;doprnt.c: 533: *ap = __va_start();
   466  079A  3076               	movlw	(low (?_printf| 0))& (0+255)
   467  079B  00F7               	movwf	??_printf
   468  079C  0877               	movf	??_printf,w
   469  079D  00F8               	movwf	printf@ap
   470  079E                     l569:	
   471                           ;doprnt.c: 543: }
   472                           ;doprnt.c: 1422: {
   473                           
   474                           ;doprnt.c: 542: continue;
   475                           
   476                           ;doprnt.c: 536: while(c = *f++) {
   477                           
   478  079E  3001               	movlw	1
   479  079F  07FA               	addwf	printf@f,f
   480  07A0  30FF               	movlw	-1
   481  07A1  077A               	addwf	printf@f,w
   482  07A2  0084               	movwf	4
   483  07A3  120A  118A  2003  120A  118A  	fcall	stringdir
   484  07A8  00F7               	movwf	??_printf
   485  07A9  0877               	movf	??_printf,w
   486  07AA  00F9               	movwf	printf@c
   487  07AB  0879               	movf	printf@c,w
   488  07AC  1903               	btfsc	3,2
   489  07AD  0008               	return
   490                           
   491                           ;doprnt.c: 540: {
   492                           ;doprnt.c: 541: (putch(c) );
   493  07AE  0879               	movf	printf@c,w
   494  07AF  120A  118A  2791  120A  118A  	fcall	_putch
   495  07B4  2F9E               	goto	l569
   496  07B5                     __end_of_printf:	
   497                           ;doprnt.c: 1469: }
   498                           ;doprnt.c: 1533: }
   499                           ;doprnt.c: 1540: return 0;
   500                           ;	Return value of _printf is never used
   501                           
   502                           
   503                           	psect	text2
   504  0791                     __ptext2:	
   505 ;; *************** function _putch *****************
   506 ;; Defined at:
   507 ;;		line 30 in file "config.h"
   508 ;; Parameters:    Size  Location     Type
   509 ;;  dato            1    wreg     unsigned char 
   510 ;; Auto vars:     Size  Location     Type
   511 ;;  dato            1    0[COMMON] unsigned char 
   512 ;; Return value:  Size  Location     Type
   513 ;;                  1    wreg      void 
   514 ;; Registers used:
   515 ;;		wreg
   516 ;; Tracked objects:
   517 ;;		On entry : 0/0
   518 ;;		On exit  : 0/0
   519 ;;		Unchanged: 0/0
   520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   521 ;;      Params:         0       0       0       0       0
   522 ;;      Locals:         1       0       0       0       0
   523 ;;      Temps:          0       0       0       0       0
   524 ;;      Totals:         1       0       0       0       0
   525 ;;Total ram usage:        1 bytes
   526 ;; Hardware stack levels used:    1
   527 ;; This function calls:
   528 ;;		Nothing
   529 ;; This function is called by:
   530 ;;		_printf
   531 ;; This function uses a non-reentrant model
   532 ;;
   533                           
   534                           
   535                           ;psect for function _putch
   536  0791                     _putch:	
   537                           
   538                           ;incstack = 0
   539                           ; Regs used in _putch: [wreg]
   540                           ;putch@dato stored from wreg
   541  0791  00F6               	movwf	putch@dato
   542  0792                     l23:	
   543                           ;config.h: 32: continue;
   544                           
   545                           ;config.h: 31: while (! PIR1bits.TXIF)
   546                           
   547  0792  1283               	bcf	3,5	;RP0=0, select bank0
   548  0793  1303               	bcf	3,6	;RP1=0, select bank0
   549  0794  1E0C               	btfss	12,4	;volatile
   550  0795  2F92               	goto	l23
   551                           
   552                           ;config.h: 33: TXREG = dato;
   553  0796  0876               	movf	putch@dato,w
   554  0797  0099               	movwf	25	;volatile
   555  0798  0008               	return
   556  0799                     __end_of_putch:	
   557                           
   558                           	psect	text3
   559  078A                     __ptext3:	
   560 ;; *************** function _iniciar_uart *****************
   561 ;; Defined at:
   562 ;;		line 36 in file "config.h"
   563 ;; Parameters:    Size  Location     Type
   564 ;;		None
   565 ;; Auto vars:     Size  Location     Type
   566 ;;		None
   567 ;; Return value:  Size  Location     Type
   568 ;;                  1    wreg      void 
   569 ;; Registers used:
   570 ;;		None
   571 ;; Tracked objects:
   572 ;;		On entry : 0/0
   573 ;;		On exit  : 0/0
   574 ;;		Unchanged: 0/0
   575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   576 ;;      Params:         0       0       0       0       0
   577 ;;      Locals:         0       0       0       0       0
   578 ;;      Temps:          0       0       0       0       0
   579 ;;      Totals:         0       0       0       0       0
   580 ;;Total ram usage:        0 bytes
   581 ;; Hardware stack levels used:    1
   582 ;; This function calls:
   583 ;;		Nothing
   584 ;; This function is called by:
   585 ;;		_main
   586 ;; This function uses a non-reentrant model
   587 ;;
   588                           
   589                           
   590                           ;psect for function _iniciar_uart
   591  078A                     _iniciar_uart:	
   592                           
   593                           ;config.h: 37: TXSTAbits.TXEN = 1;
   594                           
   595                           ;incstack = 0
   596                           ; Regs used in _iniciar_uart: []
   597  078A  1683               	bsf	3,5	;RP0=1, select bank1
   598  078B  1303               	bcf	3,6	;RP1=0, select bank1
   599  078C  1698               	bsf	24,5	;volatile
   600                           
   601                           ;config.h: 38: RCSTAbits.SPEN = 1;
   602  078D  1283               	bcf	3,5	;RP0=0, select bank0
   603  078E  1303               	bcf	3,6	;RP1=0, select bank0
   604  078F  1798               	bsf	24,7	;volatile
   605  0790  0008               	return
   606  0791                     __end_of_iniciar_uart:	
   607  007E                     btemp	set	126	;btemp
   608  007E                     wtemp0	set	126


Data Sizes:
    Strings     34
    Constant    0
    Data        0
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      11
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(1) Largest target is 18
		 -> STR_2(CODE[16]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(COMMON[2]), 


Critical Paths under _main in COMMON

    _main->_printf
    _printf->_putch

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     115
                       _iniciar_uart
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              16    16      0     115
                                              1 COMMON     4     4      0
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      15
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _iniciar_uart                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _iniciar_uart
   _printf
     _putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      5       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       B       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       B      12        0.0%


Microchip Technology PIC Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Sun Sep 03 19:53:28 2017

                      pc 0002                       l23 0792                       l41 07D5  
                     l42 07D3                       l46 07DD                       fsr 0004  
                    l581 07C7                      l591 07DF                      l569 079E  
                    l597 07EC                      fsr0 0004                     STR_1 0009  
                   STR_2 001B                     _main 07B5                     btemp 007E  
                   start 0000                    ?_main 0076                    _PORTB 0006  
                  _PORTC 0007                    _TRISB 0086                    _TRISC 0087  
                  _TXREG 0019                    _putch 0791                    _pulso 0072  
                  pclath 000A                    status 0003                    wtemp0 007E  
          ?_iniciar_uart 0076          __initialization 07F6             __end_of_main 07F6  
                 ??_main 007B                   ?_putch 0076           ??_iniciar_uart 0076  
                 _printf 0799  __end_of__initialization 07FC           __pcstackCOMMON 0076  
          __end_of_putch 0799                  ??_putch 0076               __pmaintext 07B5  
                ?_printf 0076     __end_of_iniciar_uart 0791               __stringtab 0003  
                _bandera 0070                  __ptext1 0799                  __ptext2 0791  
                __ptext3 078A          __size_of_printf 001C     end_of_initialization 07FC  
              _RCSTAbits 0018                  printf@c 0079                  printf@f 007A  
              _PORTCbits 0007                _TXSTAbits 0098    __size_of_iniciar_uart 0007  
         __end_of_printf 07B5      start_initialization 07F6             _iniciar_uart 078A  
               ??_printf 0077             _estado_boton 0074              __pbssCOMMON 0070  
              ___latbits 0002                __pstrings 0003           __size_of_putch 0008  
               _PIR1bits 000C              __stringbase 0008       __end_of__stringtab 0009  
          __size_of_main 0041                putch@dato 0076                stringcode 0003  
               printf@ap 0078                 stringdir 0003                 stringtab 0003  
